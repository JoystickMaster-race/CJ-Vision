import static org.apache.tools.ant.taskdefs.condition.Os.*
plugins {
	id "edu.wpi.first.GradleRIO" version "2020.3.2"
  id "de.undercouch.download" version "4.1.1"
  id "org.ysb33r.doxygen" version "0.6"
	id "google-test-test-suite"
  id "java-test-fixtures"
  id "groovy"
	id "cpp"
}

// Documentation Generation
doxygen {
  generate_latex false
  generate_html true

  source new File(projectDir, 'src/cpp')
  source new File(projectDir, 'src/include')

  include '**/*.cpp'
  include '**/*.h'

  file_paterns '*.cpp', '*.h'

  recursive true

  outputDir new File(projectDir, 'docs/doxygen')
}

// Deploying
deploy {
  targets {
    target('coprocessor') {
      directory = '/home/vision'
      maxChannels = 1
      timeout = 3
      failOnMissing = true

      locations {
        ssh {
          address = "CJvision.local"
          user = 'vision'
          password = 'CJfrc'
          ipv6 = false
        }
      }
    }
  }

	artifacts {

    // Deploy Vision program
    fileTreeArtifact('VisionProgram') {
      targets << 'coprocessor'
      files = fileTree(dir: 'src/')

      predeploy << {
        execute('sudo systemctl stop vision || true')
      }

      postdeploy << {
        execute('make coprocessor')
        execute('chmod +x cjVision')
        execute('sudo systemctl restart vision ||true')
      }
    }

    // Deploy Resource Files (service files and config)
		fileTreeArtifact('VisionResources') {
			targets << 'coprocessor'

			files = fileTree(dir: 'src/resources')
			postdeploy << {
        execute('sudo ln -sf $(pwd)/system/vision.service /etc/systemd/system')
        execute('sudo systemctl daemon-reload; sudo systemctl enable vision')

        if (project.hasProperty('stop')) {
          execute('sudo systemctl daemon-reload; sudo service vision stop; sudo service vision status')
        } else {
          execute('sudo systemctl daemon-reload; sudo service vision restart; sudo service vision status')
        }
			}

      postdeploy << {
        execute('sudo cp -n /etc/ssh/sshd_config /etc/ssh/sshd_config.old')
        execute('sudo cp $(pwd)/system/sshd_config /etc/ssh/sshd_config')
      }
		}

    // User deploy files
    if (file('../Coproc').isDirectory()) {
      fileTreeArtifact('UserDeploys') {
        targets << 'coprocessor'

        files = fileTree(dir: '../Coproc/src/deploy')
      }
    }
	}
}

// Local Building
model {
  components {
    cjVision(NativeExecutableSpec) {
      if (!isFamily(FAMILY_WINDOWS)) {
        return
      }
      
      targetPlatform wpi.platforms.desktop
      sources.cpp {   
        source {
          srcDirs = ['src/cpp', '../Coproc/src/main/cpp']
          includes = ['**/*.cpp', '**/*.cc', '**/*.exe']
        }

        exportedHeaders {
          srcDirs = ['src/include', '../Coproc/src/main/include']
        }
      }

      wpi.deps.wpilib(it)
      wpi.deps.googleTest(it)
      wpi.deps.vendor.cpp(it)
    }
  }
}

[FAMILY_WINDOWS, FAMILY_UNIX, FAMILY_MAC].each { osName ->
  // Create Task
  tasks.create(osName) {
    description "OS is ${osName}"
    
    // Add condition to check operating system.
    onlyIf { isFamily(osName) }

    doLast {
      println "Execution Family: '${it.name}'"
    }
  }

  // Add task as dependency for the os task
  build.dependsOn(osName)
}

task buildVision(type:Exec) {
  if (!file('../Coproc').isDirectory()) {
    ant.fail("'Coproc' folder not found one level up from build.gradle")
  }
  description "Builds vision locally"
  workingDir "src/"

  println "Building Vision Project..."
  commandLine 'make'
}

// Run Vision locally
task runVisionUNIX(type:Exec) {
  description "Run Vision Locally with webcam to test"
  workingDir "src/build"
  commandLine './cjVision'
}

// Run buldVision when user runs ./gradlew build
if (isFamily(FAMILY_WINDOWS)) {
  task runVision(dependsOn: "simulateCjVisionDebugExecutable")
} else if (isFamily(FAMILY_UNIX) || isFamily(FAMILY_MAC)) {
  build.finalizedBy(buildVision)
  runVisionUNIX.dependsOn(buildVision)
  task runVision(dependsOn: "runVisionUNIX")
} else {
  ant.fail("Unknown Platform detected")
}

wrapper {
	gradleVersion = '6.0'
}