import static org.apache.tools.ant.taskdefs.condition.Os.*
plugins {
	id "edu.wpi.first.GradleRIO" version "2020.3.2"
	id "google-test-test-suite"
	id "java-test-fixtures"
	id "groovy"
	id "cpp"
}

project.ext.set("framework_version", "2020.3.2") // main program version (minimum is 2020.3.2)

def stupid_lock = true // stupid people might try to regenerate the framework with their code still inside
apply from: rootProject.file("locations.gradle")
project.ext.set("stupid_lock", stupid_lock)

// Deploy code to device
apply from: rootProject.file("deploy.gradle")

// local building (Platform dependent)
apply from: rootProject.file("platforms/windows.gradle")
apply from: rootProject.file("platforms/unix_linux.gradle")

// Generate coprocessor file using framework version
task generateFramework {
	doLast {
		description "Generates framework for user. If the framework exists, it will override if forced to do so"

		// Configure for args
		def force = project.hasProperty("force") // force property

		if (!file("framework/$project.framework_version").isDirectory()) {
			ant.fail("[WARNING] <$project.framework_version> is not supported. Only supported frameworks are allowed")
		}

		// Generate framework
		if (force) {
			project.stupid_lock = false
		}

		if (!file("../Coproc").isDirectory()) {
			project.stupid_lock = false
		}

		if (project.stupid_lock) {
			ant.fail("[WARNING STUPID_LOCK ACTIVE] Old coproc might still be present. Run with `./gradlew generateFramework -Pforce` if you're sure")
		} else {
			description "Generate `Coproc` folder with version framework and files"
			println "Generating framework version <$project.framework_version>"
			delete "../Coproc"
			copy {
				from "framework/$project.framework_version/"
				into "../"
			}
		}
	}
}

/** 
 *
 * task configuration
 *
 */
// Run buldVision when user runs ./gradlew build
if (isFamily(FAMILY_WINDOWS)) {
	task runVision(dependsOn: "simulateCjVisionDebugExecutable")
} else if (isFamily(FAMILY_UNIX) || isFamily(FAMILY_MAC)) {
	build.finalizedBy(buildVision)
	runVisionUNIX.dependsOn(buildVision)
	task runVision(dependsOn: "runVisionUNIX")
} else {
	ant.fail("Unknown Platform detected")
}

wrapper {
	gradleVersion = '6.0'
}