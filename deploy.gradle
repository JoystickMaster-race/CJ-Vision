apply from: rootProject.file("locations.gradle")

// Deploying
deploy {
	targets {
		target('coprocessor') {
			directory = '/home/vision/'
			maxChannels = 10
			timeout = 3
			failOnMissing = true

			locations {
				ssh {
					address = "CJVision.local"
					user = 'vision'
					password = 'CJfrc'
					ipv6 = false
				}
			}
		}
	}

	artifacts {

		// Common properties
		all {
			targets << 'coprocessor'
		}

		// Deploy CJ Vision Library CPP
		fileTreeArtifact("libCpp") {
			directory = 'cjVisionLib/src/cpp'
			files = fileTree(dir: 'src/cpp')
		}

		// Deploy CJ Vision Headers
		fileTreeArtifact('cjVisionLibHEADERS') {
			directory = 'cjVisionLib/src/include'
			files = fileTree(dir: 'src/include')
		}

		// Deploy Resource Files (service files and config)
		fileTreeArtifact('VisionResources') {
			files = fileTree(dir: 'src/resources')
			postdeploy << {
				execute('sudo ln -sf $(pwd)/system/vision.service /etc/systemd/system')
				execute('sudo systemctl daemon-reload; sudo systemctl enable vision')

				if (project.hasProperty('stop')) {
					execute('sudo systemctl daemon-reload; sudo service vision stop; sudo service vision status')
				} else {
					execute('sudo systemctl daemon-reload; sudo service vision restart; sudo service vision status')
				}
			}

			postdeploy << {
				execute('sudo cp -n /etc/ssh/sshd_config /etc/ssh/sshd_config.old')
				execute('sudo cp $(pwd)/system/sshd_config /etc/ssh/sshd_config')
			}
		}

		// User deploy files
		if (file('../Coproc').isDirectory()) {
			fileTreeArtifact('UserProgram') {
				directory = 'UserProgram/main'
				files = fileTree(dir: '../Coproc/src/main')
			}
			fileTreeArtifact('UserDeploys') {
				directory = 'UserProgram/deploy'
				files = fileTree(dir: '../Coproc/src/deploy')
			}
		}

		// Deploy Makefile and run project
		fileArtifact('makeFileDeploy') {
			directory = 'cjVisionLib/src/'
			file = file('src/Makefile')
			predeploy << {
				execute('sudo systemctl stop vision || true')
			}

			postdeploy << {
				execute('make coprocessor')
				execute('chmod +x cjVision')
				execute('sudo systemctl restart vision ||true')
			}
		}
	}
}